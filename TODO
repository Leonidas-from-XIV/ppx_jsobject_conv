
1) non existing key in jsobject -- valid option value (None):
    type r = {age: int option; name: string option; smthing: float option} [@@deriving jsobject]
    #js: {age: 13} -> {age: Some(13); name: None; smthing: None}
    #js: {age: 32, name:"john appleseed"} -> {age: Some(32); name: Some("john appleseed"); smthing: None}
    maybe optional? undefined_as_option or null_as_only_option
2) move Optdef.t handling from generated code to individual funcs?
3) is_defined: 'a Optdef.t -> ('a, string) Result.t
4) insert it when needed only
5) tests
6) alternative conversions for sum types/variants -- type op = Gte of int | Lte of int  -- {gte: x} or {lte:x}
7) support for renames ^ $gte
8) simple objects translations?
